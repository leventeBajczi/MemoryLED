/* Generated by YAKINDU Statechart Tools for Arduino v0.8.0 */

#include "MemoryledConnector.h"



// #include <avr/power.h>
MemoryledConnector::MemoryledConnector(Memoryled* statemachine) {
	this->statemachine = statemachine;
}

/*
 * Initialize the hardware.
 */
void MemoryledConnector::init() {
    for(int i = 0; i < 5; i++) {
        pinMode(i, INPUT);
    }
    for(int i = 8; i < 13; i++) {
        pinMode(i, OUTPUT);
    }
}

/*
 * Raise state machine events before processing them in the state machine's runCycle().
 */
void MemoryledConnector::raiseEvents() {
	// e.g.
	// if (buttonPressed) {
	//     statemachine->raiseXYZEvent();
	// }


		if(digitalRead(0)==HIGH) {

			delay(20);
			if(digitalRead(0)==HIGH){
				digitalWrite(8, HIGH);
				delay(200);
				statemachine->getSCI_BTN()->raise_btn1();
			}
			digitalWrite(8, LOW);
		}
		else if(digitalRead(1)==HIGH) {

			delay(20);
			if(digitalRead(1)==HIGH){
				digitalWrite(9, HIGH);
				delay(200);
				statemachine->getSCI_BTN()->raise_btn2();
			}
			digitalWrite(9, LOW);
		}
		else if(digitalRead(2)==HIGH) {

			delay(20);
			if(digitalRead(2)==HIGH){
				digitalWrite(10, HIGH);
				delay(200);
				statemachine->getSCI_BTN()->raise_btn3();
			}
			digitalWrite(10, LOW);
		}
		else if(digitalRead(3)==HIGH) {

			delay(20);
			if(digitalRead(3)==HIGH){
				digitalWrite(11, HIGH);
				delay(200);
				statemachine->getSCI_BTN()->raise_btn4();
			}
			digitalWrite(11, LOW);
		}
		else if(digitalRead(4)==HIGH) {

			delay(20);
			if(digitalRead(4)==HIGH){
				digitalWrite(12, HIGH);
				delay(200);
				statemachine->getSCI_BTN()->raise_btn5();
			}
			digitalWrite(12, LOW);
		}


}

/*
 * Update the hardware depending on the state machine's state.
 */

void MemoryledConnector::syncState() {

	statemachine->getSCI_ANS()->set_next(customHandler->lights[statemachine->get_counter()]);
}

/*
 * Optimize power consumption by turning off hardware modules that are not needed.
 */
uint8_t MemoryledConnector::prepareSleepMode() {
	// Some of the functions of <avr/power.h> may not be supported by the
	// actual microprocessor you are using.
	// This method is only called in case you are using an AVR hardware timer.
	// e.g.
	// power_adc_disable();
	// power_spi_disable();
	// power_timer0_disable();
	// power_timer1_disable() ;
	// power_timer2_disable() ;
	// power_timer3_disable() ;
	// power_twi_disable();
	// power_usart0_disable();
	// power_usb_disable();
	
	return SLEEP_MODE_IDLE;
}
